// Generated by @wagmi/cli@1.1.0 on 2/16/2024 at 12:12:18 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GateKeeper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gateKeeperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_semaphore', internalType: 'address', type: 'address' },
      { name: '_verifier', internalType: 'address', type: 'address' },
      { name: '_repoNameChunk1', internalType: 'uint256', type: 'uint256' },
      { name: '_repoNameChunk2', internalType: 'uint256', type: 'uint256' }
    ]
  },
  { type: 'error', inputs: [], name: 'CommitmentExists' },
  { type: 'error', inputs: [], name: 'EmailAlreadyRegistered' },
  { type: 'error', inputs: [], name: 'InvalidProof' },
  { type: 'error', inputs: [], name: 'InvalidRepository' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CONTRIBUTORS_GROUP_ID',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'emailNullifier',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'groth16verifier',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'commitment', internalType: 'uint256', type: 'uint256' }],
    name: 'isContributor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'proof',
        internalType: 'struct IGateKeeperMeta.Proof',
        type: 'tuple',
        components: [
          { name: '_pA', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: '_pB', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
          { name: '_pC', internalType: 'uint256[2]', type: 'uint256[2]' },
          {
            name: '_pubSignals',
            internalType: 'uint256[5]',
            type: 'uint256[5]'
          }
        ]
      }
    ],
    name: 'joinContributors',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repository',
    outputs: [
      { name: 'chunk1', internalType: 'uint256', type: 'uint256' },
      { name: 'chunk2', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'semaphore',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalContributors',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalDonators',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'signal',
        internalType: 'struct IGateKeeperMeta.Signal',
        type: 'tuple',
        components: [
          { name: 'signal', internalType: 'uint256', type: 'uint256' },
          { name: 'scope', internalType: 'uint256', type: 'uint256' },
          { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
          { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
          { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' }
        ]
      }
    ],
    name: 'validateContributorSignal',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__.
 */
export function useGateKeeperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"CONTRIBUTORS_GROUP_ID"`.
 */
export function useGateKeeperContributorsGroupId<
  TFunctionName extends 'CONTRIBUTORS_GROUP_ID',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'CONTRIBUTORS_GROUP_ID',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"emailNullifier"`.
 */
export function useGateKeeperEmailNullifier<
  TFunctionName extends 'emailNullifier',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'emailNullifier',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"groth16verifier"`.
 */
export function useGateKeeperGroth16verifier<
  TFunctionName extends 'groth16verifier',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'groth16verifier',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"isContributor"`.
 */
export function useGateKeeperIsContributor<
  TFunctionName extends 'isContributor',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'isContributor',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"isMember"`.
 */
export function useGateKeeperIsMember<
  TFunctionName extends 'isMember',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'isMember',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"repository"`.
 */
export function useGateKeeperRepository<
  TFunctionName extends 'repository',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'repository',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"semaphore"`.
 */
export function useGateKeeperSemaphore<
  TFunctionName extends 'semaphore',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'semaphore',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"totalContributors"`.
 */
export function useGateKeeperTotalContributors<
  TFunctionName extends 'totalContributors',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'totalContributors',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"totalDonators"`.
 */
export function useGateKeeperTotalDonators<
  TFunctionName extends 'totalDonators',
  TSelectData = ReadContractResult<typeof gateKeeperABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gateKeeperABI,
    functionName: 'totalDonators',
    ...config
  } as UseContractReadConfig<typeof gateKeeperABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gateKeeperABI}__.
 */
export function useGateKeeperWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gateKeeperABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof gateKeeperABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof gateKeeperABI, TFunctionName, TMode>({
    abi: gateKeeperABI,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"joinContributors"`.
 */
export function useGateKeeperJoinContributors<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gateKeeperABI,
          'joinContributors'
        >['request']['abi'],
        'joinContributors',
        TMode
      > & { functionName?: 'joinContributors' }
    : UseContractWriteConfig<
        typeof gateKeeperABI,
        'joinContributors',
        TMode
      > & {
        abi?: never
        functionName?: 'joinContributors'
      } = {} as any
) {
  return useContractWrite<typeof gateKeeperABI, 'joinContributors', TMode>({
    abi: gateKeeperABI,
    functionName: 'joinContributors',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"validateContributorSignal"`.
 */
export function useGateKeeperValidateContributorSignal<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gateKeeperABI,
          'validateContributorSignal'
        >['request']['abi'],
        'validateContributorSignal',
        TMode
      > & { functionName?: 'validateContributorSignal' }
    : UseContractWriteConfig<
        typeof gateKeeperABI,
        'validateContributorSignal',
        TMode
      > & {
        abi?: never
        functionName?: 'validateContributorSignal'
      } = {} as any
) {
  return useContractWrite<
    typeof gateKeeperABI,
    'validateContributorSignal',
    TMode
  >({
    abi: gateKeeperABI,
    functionName: 'validateContributorSignal',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gateKeeperABI}__.
 */
export function usePrepareGateKeeperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gateKeeperABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gateKeeperABI,
    ...config
  } as UsePrepareContractWriteConfig<typeof gateKeeperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"joinContributors"`.
 */
export function usePrepareGateKeeperJoinContributors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gateKeeperABI, 'joinContributors'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gateKeeperABI,
    functionName: 'joinContributors',
    ...config
  } as UsePrepareContractWriteConfig<typeof gateKeeperABI, 'joinContributors'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gateKeeperABI}__ and `functionName` set to `"validateContributorSignal"`.
 */
export function usePrepareGateKeeperValidateContributorSignal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof gateKeeperABI,
      'validateContributorSignal'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gateKeeperABI,
    functionName: 'validateContributorSignal',
    ...config
  } as UsePrepareContractWriteConfig<
    typeof gateKeeperABI,
    'validateContributorSignal'
  >)
}
